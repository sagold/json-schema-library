import { CreateError } from "./createCustomError";
declare const defaultErrors: {
    readonly additionalItemsError: CreateError<import("../types").ErrorData>;
    readonly additionalPropertiesError: CreateError<import("../types").ErrorData>;
    readonly allOfError: CreateError<import("../types").ErrorData>;
    readonly anyOfError: CreateError<import("../types").ErrorData>;
    readonly constError: CreateError<import("../types").ErrorData>;
    readonly containsAnyError: CreateError<import("../types").ErrorData>;
    readonly containsArrayError: CreateError<import("../types").ErrorData>;
    readonly containsError: CreateError<import("../types").ErrorData>;
    readonly containsMaxError: CreateError<import("../types").ErrorData>;
    readonly containsMinError: CreateError<import("../types").ErrorData>;
    readonly enumError: CreateError<import("../types").ErrorData>;
    readonly exclusiveMaximumError: CreateError<import("../types").ErrorData>;
    readonly exclusiveMinimumError: CreateError<import("../types").ErrorData>;
    readonly forbiddenPropertyError: CreateError<import("../types").ErrorData>;
    readonly formatDateError: CreateError<import("../types").ErrorData>;
    readonly formatDateTimeError: CreateError<import("../types").ErrorData>;
    readonly formatDurationError: CreateError<import("../types").ErrorData>;
    readonly formatEmailError: CreateError<import("../types").ErrorData>;
    readonly formatHostnameError: CreateError<import("../types").ErrorData>;
    readonly formatIPV4Error: CreateError<import("../types").ErrorData>;
    readonly formatIPV4LeadingZeroError: CreateError<import("../types").ErrorData>;
    readonly formatIPV6Error: CreateError<import("../types").ErrorData>;
    readonly formatIPV6LeadingZeroError: CreateError<import("../types").ErrorData>;
    readonly formatJsonPointerError: CreateError<import("../types").ErrorData>;
    readonly formatRegExError: CreateError<import("../types").ErrorData>;
    readonly formatTimeError: CreateError<import("../types").ErrorData>;
    readonly formatURIError: CreateError<import("../types").ErrorData>;
    readonly formatURIReferenceError: CreateError<import("../types").ErrorData>;
    readonly formatURITemplateError: CreateError<import("../types").ErrorData>;
    readonly formatURLError: CreateError<import("../types").ErrorData>;
    readonly formatUUIDError: CreateError<import("../types").ErrorData>;
    readonly invalidDataError: CreateError<import("../types").ErrorData>;
    readonly invalidPropertyNameError: CreateError<import("../types").ErrorData>;
    readonly invalidSchemaError: CreateError<import("../types").ErrorData>;
    readonly invalidTypeError: CreateError<import("../types").ErrorData>;
    readonly maximumError: CreateError<import("../types").ErrorData>;
    readonly maxItemsError: CreateError<import("../types").ErrorData>;
    readonly maxLengthError: CreateError<import("../types").ErrorData>;
    readonly maxPropertiesError: CreateError<import("../types").ErrorData>;
    readonly minimumError: CreateError<import("../types").ErrorData>;
    readonly minItemsError: CreateError<import("../types").ErrorData>;
    readonly minItemsOneError: CreateError<import("../types").ErrorData>;
    readonly minLengthError: CreateError<import("../types").ErrorData>;
    readonly minPropertiesError: CreateError<import("../types").ErrorData>;
    readonly missingArrayItemError: CreateError<import("../types").ErrorData>;
    readonly missingDependencyError: CreateError<import("../types").ErrorData>;
    readonly missingOneOfPropertyError: CreateError<import("../types").ErrorData>;
    readonly missingOneOfDeclaratorError: CreateError<import("../types").ErrorData>;
    readonly multipleOfError: CreateError<import("../types").ErrorData>;
    readonly multipleOneOfError: CreateError<import("../types").ErrorData>;
    readonly noAdditionalPropertiesError: CreateError<import("../types").ErrorData>;
    readonly notError: CreateError<import("../types").ErrorData>;
    readonly oneOfError: CreateError<import("../types").ErrorData>;
    readonly oneOfPropertyError: CreateError<import("../types").ErrorData>;
    readonly patternError: CreateError<import("../types").ErrorData>;
    readonly patternPropertiesError: CreateError<import("../types").ErrorData>;
    readonly requiredPropertyError: CreateError<import("../types").ErrorData>;
    readonly schemaWarning: CreateError<import("../types").ErrorData>;
    readonly typeError: CreateError<import("../types").ErrorData>;
    readonly undefinedValueError: CreateError<import("../types").ErrorData>;
    readonly unevaluatedItemsError: CreateError<import("../types").ErrorData>;
    readonly unevaluatedPropertyError: CreateError<import("../types").ErrorData>;
    readonly uniqueItemsError: CreateError<import("../types").ErrorData>;
    readonly unknownPropertyError: CreateError<import("../types").ErrorData>;
    readonly valueNotEmptyError: CreateError<import("../types").ErrorData>;
};
export declare const errors: typeof defaultErrors & Record<string, CreateError>;
export {};
