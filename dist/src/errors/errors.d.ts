export declare const errors: {
    "additional-items-error": string;
    "additional-properties-error": string;
    "all-of-error": string;
    "any-of-error": string;
    "const-error": string;
    "contains-any-error": string;
    "contains-array-error": string;
    "contains-error": string;
    "contains-min-error": string;
    "contains-max-error": string;
    "enum-error": string;
    "exclusive-maximum-error": string;
    "exclusive-minimum-error": string;
    "forbidden-property-error": string;
    "format-date-error": string;
    "format-date-time-error": string;
    "format-duration-error": string;
    "format-email-error": string;
    "format-hostname-error": string;
    "format-ipv4-error": string;
    "format-ipv4-leading-zero-error": string;
    "format-ipv6-error": string;
    "format-ipv6-leading-zero-error": string;
    "format-json-pointer-error": string;
    "format-regex-error": string;
    "format-time-error": string;
    "format-uri-error": string;
    "format-uri-reference-error": string;
    "format-uri-template-error": string;
    "format-url-error": string;
    "format-uuid-error": string;
    "invalid-data-error": string;
    "invalid-property-name-error": string;
    "maximum-error": string;
    "max-items-error": string;
    "max-length-error": string;
    "max-properties-error": string;
    "minimum-error": string;
    "min-items-error": string;
    "min-items-one-error": string;
    "min-length-error": string;
    "min-length-one-error": string;
    "missing-one-of-declarator-error": string;
    "min-properties-error": string;
    "missing-array-item-error": string;
    "missing-dependency-error": string;
    "missing-one-of-property-error": string;
    "multiple-of-error": string;
    "multiple-one-of-error": string;
    "no-additional-properties-error": string;
    "not-error": string;
    "one-of-error": string;
    "one-of-property-error": string;
    "pattern-error": string;
    "pattern-properties-error": string;
    "required-property-error": string;
    /** return schema-warning with createSchemaWarning:true when a valid, but undefined  property was found */
    "schema-warning": string;
    "type-error": string;
    "undefined-value-error": string;
    "unevaluated-property-error": string;
    "unevaluated-items-error": string;
    "unique-items-error": string;
    "unknown-property-error": string;
    "value-not-empty-error": string;
};
